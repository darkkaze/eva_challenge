from rest_framework import generics
from rest_framework.permissions import IsAdminUser

from .models import Patient, Study
from .serializers import PatientSerializer, StudySerializer, StudyUpdateSerializer


class PatientListCreateView(generics.ListCreateAPIView):
    queryset = Patient.objects.all()
    serializer_class = PatientSerializer
    permission_classes = [IsAdminUser]


class PatientRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Patient.objects.all()
    serializer_class = PatientSerializer
    permission_classes = [IsAdminUser]


class StudytListCreateView(generics.ListCreateAPIView):
    queryset = Study.objects.all()
    serializer_class = StudySerializer
    permission_classes = [IsAdminUser]

    @property
    def patient_pk(self):
        '''
        url attribute patient_pk
        '''
        return self.kwargs['patient_pk']

    def get_serializer(self, *args, **kwargs):
        '''
        get the serializer class

        Notes:
            rest_framework.documentation.include_docs_urls call this method
            with request=None.
            Taking advantage of this, we can pass a different serializer
            to modify the autogenerated documentation page.
            In this case, we want to hide patient from the
            valid received attributes

            The right way is use
            django-rest-framework.org/api-guide/schemas
            but this hack is more easy.
        '''
        if not self.request:
            return StudyUpdateSerializer(*args, **kwargs)
        return super().get_serializer(*args, **kwargs)

    def get_queryset(self):
        return super().get_queryset().filter(patient_id=self.patient_pk)

    def create(self, request, *args, **kwargs):
        '''
        process the post and create the object

        notes:
            Patch the request.data (post) for add the patient_pk
            from the url(patients/<int:patient_pk>/studies).
            This is just a convenience, so that the client does not have
            to enter the patient_pk in the url and again in the post.
        '''
        request.data.update({"patient": self.patient_pk})
        return super().create(request, *args, **kwargs)


class StudyRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Study.objects.select_related('body_part', 'type').all()
    serializer_class = StudyUpdateSerializer
    permission_classes = [IsAdminUser]

    @property
    def patient_pk(self):
        return self.kwargs['patient_pk']

    def get_queryset(self):
        return super().get_queryset().filter(patient_id=self.patient_pk)
